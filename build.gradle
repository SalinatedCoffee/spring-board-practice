plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '20'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    // add IDE-level documentation for custom-written Spring configuration fields (thymeleaf3)
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // queryDSL settings
    // version number is automatically managed by plugin io.spring.depend...agement, so can be omitted if it comes at end of line
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta" // format changed for this package from springboot 3.0+, manually specify version
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    // for this package however, version number is not a suffix of string, so import manually using groovy
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta" // use querydsl JPAAnnotationProcessor
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // handle java.lang.NoClassDefFoundError (javax.annotation.Generated)
    annotationProcessor "jakarta.persistence:jakarta.persistence-api" // handle java.lang.NoClassDefFoundError (javax.annotation.Entity)
}

tasks.named('test') {
    useJUnitPlatform()
}

// Querydsl settings
// create build-related files in directory not managed by intellij to avoid conflicts
def generated = 'src/main/generated'

// specify path where querydsl QClass files should be created
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// add path of querydsl QClass to java source set
sourceSets {
    main.java.srcDirs += [ generated ]
}

// delete QClass directory when running gradle clean
clean {
    delete file(generated)
}
